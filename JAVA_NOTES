JAVA Notes:
===========
What is encapsulation?Encapsulation is also known as “data Hiding“.
hiding certain details by making them private , and allowing them to be accessed by setters and getters.

Method Overloading  - Static polymorphism
1) different number of parameters
2) same number of parameters with different type
3) same number of parameters with rearrangement of types

Method Overriding - Runtime Polymorphism
child class overriding a method of a parent class.
that means the method in child class will have it's own implementation ,when compared to parent class.
The main advantage of method overriding is that the class can give its own specific implementation to a 
inherited method without even modifying the parent class code.
https://beginnersbook.com/2014/01/method-overriding-in-java-with-example/

Method Overriding is an example of runtime polymorphism.
When a parent class reference points to the child class object then 
the call to the overridden method is determined at runtime, because during method call 
which method(parent class or child class) is to be executed is determined by the type of object.
This process in which call to the overridden method is resolved at runtime is known as dynamic method dispatch.

In dynamic method dispatch the object can call the overriding methods of child class and 
all the non-overridden methods of base class but it cannot call the methods which are newly declared 
in the child class. In the above example the object obj2 is calling the disp(). 
However if you try to call the newMethod() method (which has been newly declared in Demo class) 
using obj2 then you would give compilation error with the following message:

Super keyword in Method Overriding : 
Super() calls the constructor of parent
Super.xyz() calls the method of the parent

Abstract Class: https://beginnersbook.com/2013/05/java-abstract-class-method/
When you absolutely know that a method will be overriden by the child class and implemented in the child class
then you dont need that method to be implemented in the parent class , and you can mark the method as abstract
and also the class as abstract . child will extend the abstract class. Abstract class objects cannot be created.
Abstract class is useless until somebody really extends the class.


OOPS JAVA:
https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/

string-vs-stringbuffer-vs-stringbuilder
https://www.journaldev.com/538/string-vs-stringbuffer-vs-stringbuilder

Array List vs Linked List:
https://www.geeksforgeeks.org/arraylist-vs-linkedlist-java/

JVM:
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/

Java Platform Independent:
https://www.geeksforgeeks.org/java-platform-independent/

To create a custom exception we need to extend the java.lang.RuntimeException class:
https://www.baeldung.com/java-new-custom-exception

Immutable Class:
https://www.geeksforgeeks.org/create-immutable-class-java/

Inheritance and constructors in Java
In Java, constructor of base class with no argument gets automatically called in derived class constructor. For example, output of following program is:
Base Class Constructor Called
Derived Class Constructor Called
https://www.geeksforgeeks.org/g-fact-67/

In Java, all objects are dynamically allocated on Heap
https://www.geeksforgeeks.org/g-fact-46/

Hashmap:Anagram
https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other-using-hashmap-in-java/

Sort Arrays:
// sort array elements 
    Arrays.sort(arr); 


HASHMAP vs HASHTABLE
https://www.geeksforgeeks.org/differences-between-hashmap-and-hashtable-in-java/
Hashtable<Integer,String> ht=new Hashtable<Integer,String>(); 
ht.put(101," ajay"); 
for (Map.Entry m:ht.entrySet()) { 
            System.out.println(m.getKey()+" "+m.getValue()); 
} 


======================================================================================================================
List vs. Set  : http://tutorials.jenkov.com/java-collections/list.html

The "Java List" and "Java Set" interfaces are quite similar in that they both represents a collection of elements.
However, there are some significant differences. These differences are reflected in the methods the List and Set interfaces offer.

The first difference between the Java List and Java Set interface is,
1)that the same element can occur more than once in a Java List.
2)This is different from a Java Set where each element can occur only once.

The second difference between a Java List and Java Set interfaces is, 
1) that the elements in a List has an order, and the elements can be iterated in that order. 
2)A Java Set does not make any promises about the order of the elements kept internally.

List Implementations

Being a Collection subtype all methods in the Collection interface are also available in the List interface.

Since List is an interface you need to instantiate a concrete implementation of the interface in order to use it. 
You can choose between the following List implementations in the Java Collections API:

    java.util.ArrayList
    java.util.LinkedList
    java.util.Vector
    java.util.Stack

There are also concurrent List implementations in the java.util.concurrent package. 
These List implementations are explained in more detail in my java.util.concurrent tutorial .

Here are a few examples of how to create a List instance:

List listA = new ArrayList();
List listB = new LinkedList();
List listC = new Vector();
List listD = new Stack();

